name: CI

on: push

env:
  CI_REPO_NAME: ${{ github.repository }}
  CI_COMMIT_ID: ${{ github.sha }}

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      NODE_VERSION: ${{steps.engines.outputs.NODE_VERSION}}
      CACHE_KEY: ${{steps.cache.outputs.CACHE_KEY}}
    steps:
      - uses: actions/checkout@v2

      - name: Set Node version
        id: engines
        run: |
          echo "::set-output name=NODE_VERSION::$(jq -r '.engines.node' package.json)"
          
  tests:
    runs-on: ubuntu-latest
    needs:
      - init
    strategy:
      matrix:
        script: [ 'test' ]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: "${{ needs.init.outputs.NODE_VERSION }}"
      - name: Install Packages
        run: |
          npm ci
      - name: Run unit ${{ matrix.script }}
        run: npm run ${{ matrix.script }}
  
  deploy-staging:
    if: github.ref == 'refs/heads/main'
    needs:
      - init
      - tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: "${{ needs.init.outputs.NODE_VERSION }}"

      - name: Install Packages
        run: |
          npm ci
      - name: build
        run:  echo "Stage release"
  
  deploy-production:
    if: github.ref == 'refs/heads/production'
    needs:
      - init
      - tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: "${{ needs.init.outputs.NODE_VERSION }}"

      - name: Install Packages
        run: |
          npm ci
      - name: build
        run:  echo "Prod release"
  release:
    needs: [deploy-staging] 
    runs-on: ubuntu-latest
    steps:
      - name: Create a Release
      - uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
        

